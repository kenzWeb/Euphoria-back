const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function removeDuplicates() {
	try {
		console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π...\n')

		// –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
		console.log('üìÇ –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
		const categories = await prisma.category.findMany({
			select: { id: true, name: true },
			orderBy: { id: 'asc' }
		})

		const seenCategories = new Set()
		const categoriesToDelete = []

		for (const category of categories) {
			if (seenCategories.has(category.name)) {
				categoriesToDelete.push(category.id)
			} else {
				seenCategories.add(category.name)
			}
		}

		if (categoriesToDelete.length > 0) {
			await prisma.category.deleteMany({
				where: { id: { in: categoriesToDelete } }
			})
			console.log(
				`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${categoriesToDelete.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π`
			)
		} else {
			console.log('   ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
		}

		// –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ü–≤–µ—Ç–æ–≤
		console.log('üé® –û—á–∏—Å—Ç–∫–∞ —Ü–≤–µ—Ç–æ–≤...')
		const colors = await prisma.color.findMany({
			select: { id: true, name: true },
			orderBy: { id: 'asc' }
		})

		const seenColors = new Set()
		const colorsToDelete = []

		for (const color of colors) {
			if (seenColors.has(color.name)) {
				colorsToDelete.push(color.id)
			} else {
				seenColors.add(color.name)
			}
		}

		if (colorsToDelete.length > 0) {
			await prisma.color.deleteMany({
				where: { id: { in: colorsToDelete } }
			})
			console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${colorsToDelete.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ü–≤–µ—Ç–æ–≤`)
		} else {
			console.log('   ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ü–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
		}

		// –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–∞–∑–º–µ—Ä–æ–≤
		console.log('üìè –û—á–∏—Å—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤...')
		const sizes = await prisma.size.findMany({
			select: { id: true, name: true },
			orderBy: { id: 'asc' }
		})

		const seenSizes = new Set()
		const sizesToDelete = []

		for (const size of sizes) {
			if (seenSizes.has(size.name)) {
				sizesToDelete.push(size.id)
			} else {
				seenSizes.add(size.name)
			}
		}

		if (sizesToDelete.length > 0) {
			await prisma.size.deleteMany({
				where: { id: { in: sizesToDelete } }
			})
			console.log(
				`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${sizesToDelete.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–∞–∑–º–µ—Ä–æ–≤`
			)
		} else {
			console.log('   ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
		}

		// –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–∏–ª–µ–π –æ–¥–µ–∂–¥—ã
		console.log('üëó –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∏–ª–µ–π –æ–¥–µ–∂–¥—ã...')
		const dressStyles = await prisma.dressStyle.findMany({
			select: { id: true, name: true },
			orderBy: { id: 'asc' }
		})

		const seenStyles = new Set()
		const stylesToDelete = []

		for (const style of dressStyles) {
			if (seenStyles.has(style.name)) {
				stylesToDelete.push(style.id)
			} else {
				seenStyles.add(style.name)
			}
		}

		if (stylesToDelete.length > 0) {
			await prisma.dressStyle.deleteMany({
				where: { id: { in: stylesToDelete } }
			})
			console.log(
				`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${stylesToDelete.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–∏–ª–µ–π –æ–¥–µ–∂–¥—ã`
			)
		} else {
			console.log('   ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å—Ç–∏–ª–µ–π –æ–¥–µ–∂–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
		const finalCategories = await prisma.category.count()
		const finalColors = await prisma.color.count()
		const finalSizes = await prisma.size.count()
		const finalDressStyles = await prisma.dressStyle.count()

		console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${finalCategories}`)
		console.log(`   –¶–≤–µ—Ç–∞: ${finalColors}`)
		console.log(`   –†–∞–∑–º–µ—Ä—ã: ${finalSizes}`)
		console.log(`   –°—Ç–∏–ª–∏ –æ–¥–µ–∂–¥—ã: ${finalDressStyles}`)

		console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

		await prisma.$disconnect()
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π:', error)
		await prisma.$disconnect()
		process.exit(1)
	}
}

removeDuplicates()
